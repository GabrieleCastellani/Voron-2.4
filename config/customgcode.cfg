[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 310,310
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12



#####################################################################
#      Thermistors
#####################################################################

#[temperature_sensor chamber_temp]
#sensor_type: PT1000
#sensor_pin: PC1
#min_temp: 0
#max_temp: 120

# [temperature_sensor controller_temp]
# sensor_type: PT1000
# sensor_pin: PC2
# min_temp: 0
# max_temp: 120

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 0
max_temp: 100

[temperature_fan controller]
# Exhaust/Chamber fan - Z board, HE0 Connector
pin: PB2
max_power: .5
shutdown_speed: 0.0
kick_start_time: 5.0
# Chamber Thermistor
sensor_type: PT1000
sensor_pin: PC2
min_temp: 0
max_temp: 80.0
target_temp: 35.0   ; Activate Exhaust fan at this temperature
control: watermark
gcode_id: Cz

[temperature_fan chamber]
# Exhaust/Chamber fan - Z board, HE0 Connector
pin: PB3
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
# Chamber Thermistor
sensor_type: PT1000
sensor_pin: PC1
min_temp: 0
max_temp: 70.0
target_temp: 40.0   ; Activate Exhaust fan at this temperature
control: watermark
gcode_id: C

# [heater_fan controller_fan]
# ##	Controller fan - FAN2 Connector
# pin: PB2
# max_power: 1.0
# shutdown_speed: 0.0
# kick_start_time: 5.0
# heater: heater_bed
# heater_temp: 35
# fan_speed: .80

# [heater_fan exhaust_fan]  
# ##  Exhaust fan - In E2 OUT Positon
# pin: PB3
# max_power: 1.0
# shutdown_speed: 0.0
# kick_start_time: 5.0
# heater: heater_bed
# heater_temp: 35
# fan_speed: .80


#[fan_generic controller_partfan]
##	Controller fan - FAN2 Connector
#pin: PB2
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0

# [fan_generic exhaust_partfan]
# ##  Exhaust fan - In E2 OUT Positon
# pin: PB3
# max_power: 1.0
# shutdown_speed: 0.0
# kick_start_time: 5.0

[gcode_macro PRIME_LINE]   
gcode:
    MY117 M="PRIME_LINE"
    SAVE_GCODE_STATE NAME=Pre_Prime
    G90
    G92 E0 ;Reset Extruder
    G1 Z10.0 F3000 ;Move Z Axis up
    G1 X0 Y0;
    G1 Z0.28 F5000.0 ;Move to start position
    G1 X300 Y0 Z0.28 F1500.0 E30 ;Draw the first line
    G92 E0 ;Reset Extruder
    G1 Z10 F3000 ;Move Z Axis up
    RESTORE_GCODE_STATE NAME=Pre_Prime

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.
[respond]
default_type: echo
#   Sets the default prefix of the "M117" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".
[gcode_macro PRINT_START]
gcode:
    MY117 M="PRINT_START {params}"
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
    START_PRINT BED=BED_TEMP EXTRUDER=EXTRUDER_TEMP

[gcode_macro START_PRINT]
gcode:
    MY117 M="START_PRINT {params}"
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set BED_TEMP_I = params.BED|float * 0.8|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
    
   
    M300
    MY117 M="BED {BED_TEMP}"
    MY117 M="BED INIT {BED_TEMP_I}"
    MY117 M="EXTRUDER {EXTRUDER_TEMP}"
    

    MY117 M="Start bed heating to {BED_TEMP_I}"
    
    {% if BED_TEMP_I >= printer.heater_bed.temperature %}
    MY117 M="Bed is cooler than 80% of target temp waiting to reach target temp"
    M190 S{BED_TEMP_I}
    {% elif BED_TEMP >= printer.heater_bed.temperature %}
    MY117 M="Bed is too hot waiting to reach target temp"
    M190 S{BED_TEMP}
    {% else %}
    MY117 M="Bed is hot enought to proceed"
    M140 S{BED_TEMP}
    {% endif %}
    MY117 M="set the bed and extruder to target temp while QGL"
    M140 S{BED_TEMP}
    
    M104 S{EXTRUDER_TEMP}
    #G4 P30000
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    
    MY117 M="Quad Gantry level"
    G32

    MY117 M="Move the nozzle near the bed"
    G1 Z50 F3000
    
    MY117 M="Wait for bed to reach {BED_TEMP}"
    M190 S{BED_TEMP}
    MY117 M="Wait for nozzle to reach {EXTRUDER_TEMP}"
    M109 S{EXTRUDER_TEMP}
    
    MY117 M="Homing"
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE 
    G28
    SET_PIN PIN=nozzlelight VALUE=5
    SET_LED LED=led RED=.5 GREEN=.5 BLUE=.5  TRANSMIT=1

    SET_GCODE_OFFSET Z=-0.250
    
    PRIME_LINE
    MY117 M="Starte Printing"

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
    MY117 M="BED_MESH_CALIBRATE"
    BASE_BED_MESH_CALIBRATE

[gcode_macro set_right_led]
gcode:
    MY117 M="set_right_led"
    {% set ALT = params.ALT|default(0)|float %}
    {% set RED = params.RED|default(0)|float %}
    {% set GREEN = params.GREEN|default(0)|float %}
    {% set BLUE = params.BLUE|default(0)|float %}

    {% set REDA = params.REDA|default(0)|float %}
    {% set GREENA = params.GREENA|default(0)|float %}
    {% set BLUEA = params.BLUEA|default(0)|float %}
    {% set PROGRESS = params.PROG|default(-1)|float %}
    set_led_eff ALT={ALT} RED={RED} GREEN={GREEN} BLUE={BLUE} REDA={REDA} GREENA={GREENA} BLUEA={BLUEA} PROGRESS={PROGRESS}  STARTLED=9 STOPLED=27


[gcode_macro set_left_led]
gcode:
    MY117 M="set_left_led"
    {% set ALT = params.ALT|default(0)|float %}
    {% set RED = params.RED|default(0)|float %}
    {% set GREEN = params.GREEN|default(0)|float %}
    {% set BLUE = params.BLUE|default(0)|float %}

    {% set REDA = params.REDA|default(0)|float %}
    {% set GREENA = params.GREENA|default(0)|float %}
    {% set BLUEA = params.BLUEA|default(0)|float %}
    {% set PROGRESS = params.PROG|default(-1)|float %}

    
    set_led_eff ALT={ALT} RED={RED} GREEN={GREEN} BLUE={BLUE} REDA={REDA} GREENA={GREENA} BLUEA={BLUEA} PROGRESS={PROGRESS} STARTLED=28 STOPLED=46 


[gcode_macro set_led_eff]
gcode:
    MY117 M="set_led_eff"
    {% set ids = range((params.STARTLED|int)+1,(params.STOPLED|int)+1) %}
    
    {% set ALT = params.ALT|default(0)|float %}
    {% set RED = params.RED|default(0)|float %}
    {% set GREEN = params.GREEN|default(0)|float %}
    {% set BLUE = params.BLUE|default(0)|float %}

    {% set REDA = params.REDA|default(0)|float %}
    {% set GREENA = params.GREENA|default(0)|float %}
    {% set BLUEA = params.BLUEA|default(0)|float %}
    {% set PROGRESS = params.PROG|default(-1)|float %}

    {% for l in ids %}
        {% if ALT>0 %}
            {% if l%2==0 %}
              
                SET_LED LED=led RED={RED} GREEN={GREEN} BLUE={BLUE} INDEX={l}  TRANSMIT=1
            {% else %}
                
                SET_LED LED=led RED=0 GREEN=0 BLUE=0 INDEX={l}  TRANSMIT=1
            {% endif %}
        {% elif PROGRESS>0 %}
            {% set cur = ((l|float-8)*5) %}
            
            {% if PROGRESS>=cur %}
                SET_LED LED=led RED={RED} GREEN={GREEN} BLUE={BLUE} INDEX={l}  TRANSMIT=1
            {% else %}
                SET_LED LED=led RED={REDA} GREEN=.5 BLUE={BLUEA} INDEX={l}  TRANSMIT=1
            {% endif %}    
        {% else %}
            SET_LED LED=led RED={RED} GREEN={GREEN} BLUE={BLUE} INDEX={l}  TRANSMIT=1
        {% endif %}


    {% endfor %}



#[delayed_gcode led_temp]
#initial_duration: 2.
#gcode:
#    temperature_led
    #UPDATE_DELAYED_GCODE ID=led_temp DURATION=5

[gcode_macro temperature_led]
gcode:
    MY117 M="temperature_led"
  #if the extruder is off
   {% if printer.extruder.target == 0 %}
      
      #Set the LED to red if the extruder is off but is still hot, otherwise 
      # set the color to green
      {% if printer.extruder.temperature > 60.0 %}
         set_right_led RED=0.5 GREEN=0 BLUE=0 REDA=0 GREENA=0 BLUEA=0 ALT=1
      {% else %}
         set_right_led RED=0.5 GREEN=0.5 BLUE=0.5
      {% endif %}     

   {% else %}

         #if the extruder temp is at target temperature 
         {% if printer.extruder.temperature >= printer.extruder.target - 4.0 %}
            set_right_led RED=0.5 GREEN=0 BLUE=0

         #if the extruder is still heating
         {% else %}
            {% set scaler = printer.extruder.temperature|float / printer.extruder.target|float %}
            set_right_led RED=0.5 GREEN=0 BLUE=0 PROG={ scaler|float * 100 }
         {% endif %}  

   {% endif %}

   #if the extruder is off
   {% if printer.heater_bed.target == 0 %}

      #Set the LED to red if the extruder is off but is still hot, otherwise 
      # set the color to green
      {% if printer.heater_bed.temperature > 40.0 %}
         set_left_led RED=0.5 GREEN=0 BLUE=0 REDA=0 GREENA=0 BLUEA=0 ALT=1
      {% else %}
         set_left_led RED=0.5 GREEN=0.5 BLUE=0
      {% endif %}     

   {% else %}

         #if the extruder temp is at target temperature 
         {% if printer.heater_bed.temperature >= printer.heater_bed.target - 4.0 %}
            set_left_led RED=0.5 GREEN=0 BLUE=0

         #if the extruder is still heating
         {% else %}
            {% set scaler = printer.heater_bed.temperature|float / printer.heater_bed.target|float %}
            set_left_led RED=0 GREEN=0 BLUE=0.5 PROG={ scaler|float * 100 }
         {% endif %}  

   {% endif %}





[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M300
   MY117 M="CANCEL_PRINT"
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}

   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F6000 Z20 ; Move Z Axis up 20 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X300 Y300 F18000 ; Move Heat Bed to the front for easy print removal
   {% endif %}
   BED_MESH_CLEAR
   ;set part fan speed to zero.
   M106 S0
   ;bed and hotend are left at the print temps in case I want to restart.
   SET_PIN PIN=nozzlelight VALUE=0
   SET_LED LED=led RED=0 GREEN=0 BLUE=0  TRANSMIT=1
   M84 ; Disable stepper motors

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    MY117 M="CANCEL_PRINT"
    G92 E0                         ; zero the extruder
    CANCEL_PRINT
    TURN_OFF_HEATERS



[gcode_macro CENTER]
gcode:
    # Turn off bed, extruder, and fan
    MY117 M="CENTER"
    G90
    G1 X175 Y175 Z100 F17800

    
######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

[output_pin BEEPER_pin]
pin: PC9
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    MY117 M="M300 BEEP"


######################################################################
# Lighting Control
######################################################################

[gcode_macro nozzle_lights_off]
gcode:
    MY117 M="nozzle_lights_off"
    SET_PIN PIN=nozzlelight VALUE=0
 
[gcode_macro nozzle_lights_on]
gcode:
    MY117 M="nozzle_lights_on"
    SET_PIN PIN=nozzlelight VALUE=100
 
[gcode_macro nozzle_lights_toggle]
gcode:
    MY117 M="nozzle_lights_toggle"
    {% if printer["output_pin caselight"].value > 1 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}

[gcode_macro MY117]
gcode:
    M118 {params.M}
    M117 {params.M}
